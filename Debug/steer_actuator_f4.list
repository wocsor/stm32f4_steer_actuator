
steer_actuator_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002978  08002978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002988  08002988  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002988  08002988  00012988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002990  08002990  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002990  08002990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002994  08002994  00012994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000090  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a2a2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016f0  00000000  00000000  0002a2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  0002b9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009e8  00000000  00000000  0002c470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020134  00000000  00000000  0002ce58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad17  00000000  00000000  0004cf8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c70a9  00000000  00000000  00057ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011ed4c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cdc  00000000  00000000  0011ed9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002960 	.word	0x08002960

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002960 	.word	0x08002960

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fb01 	bl	8000ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f857 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f971 	bl	80007c0 <MX_GPIO_Init>
  MX_CAN1_Init();
 80004de:	f000 f8bb 	bl	8000658 <MX_CAN1_Init>
  MX_TIM2_Init();
 80004e2:	f000 f8ed 	bl	80006c0 <MX_TIM2_Init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004e6:	2100      	movs	r1, #0
 80004e8:	4824      	ldr	r0, [pc, #144]	; (800057c <main+0xb0>)
 80004ea:	f001 fc2f 	bl	8001d4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004ee:	2104      	movs	r1, #4
 80004f0:	4822      	ldr	r0, [pc, #136]	; (800057c <main+0xb0>)
 80004f2:	f001 fc2b 	bl	8001d4c <HAL_TIM_PWM_Start>

  int32_t CH1_DC = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2140      	movs	r1, #64	; 0x40
 80004fe:	4820      	ldr	r0, [pc, #128]	; (8000580 <main+0xb4>)
 8000500:	f000 fefe 	bl	8001300 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	481d      	ldr	r0, [pc, #116]	; (8000580 <main+0xb4>)
 800050a:	f000 fef9 	bl	8001300 <HAL_GPIO_WritePin>
	  delay(500000);
 800050e:	481d      	ldr	r0, [pc, #116]	; (8000584 <main+0xb8>)
 8000510:	f000 f998 	bl	8000844 <delay>

    while(CH1_DC < 65535)
 8000514:	e00d      	b.n	8000532 <main+0x66>
    {
        TIM2->CCR1 = CH1_DC;
 8000516:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6353      	str	r3, [r2, #52]	; 0x34
        TIM2->CCR2 = CH1_DC;
 800051e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6393      	str	r3, [r2, #56]	; 0x38
        CH1_DC += 70;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3346      	adds	r3, #70	; 0x46
 800052a:	607b      	str	r3, [r7, #4]
        HAL_Delay(1);
 800052c:	2001      	movs	r0, #1
 800052e:	f000 fb45 	bl	8000bbc <HAL_Delay>
    while(CH1_DC < 65535)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000538:	4293      	cmp	r3, r2
 800053a:	ddec      	ble.n	8000516 <main+0x4a>
    }

	  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2140      	movs	r1, #64	; 0x40
 8000540:	480f      	ldr	r0, [pc, #60]	; (8000580 <main+0xb4>)
 8000542:	f000 fedd 	bl	8001300 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	480d      	ldr	r0, [pc, #52]	; (8000580 <main+0xb4>)
 800054c:	f000 fed8 	bl	8001300 <HAL_GPIO_WritePin>
	  delay(500000);
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <main+0xb8>)
 8000552:	f000 f977 	bl	8000844 <delay>

    while(CH1_DC > 0)
 8000556:	e00d      	b.n	8000574 <main+0xa8>
    {
        TIM2->CCR1 = CH1_DC;
 8000558:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	6353      	str	r3, [r2, #52]	; 0x34
        TIM2->CCR2 = CH1_DC;
 8000560:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6393      	str	r3, [r2, #56]	; 0x38
        CH1_DC -= 70;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3b46      	subs	r3, #70	; 0x46
 800056c:	607b      	str	r3, [r7, #4]
        HAL_Delay(1);
 800056e:	2001      	movs	r0, #1
 8000570:	f000 fb24 	bl	8000bbc <HAL_Delay>
    while(CH1_DC > 0)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	dcee      	bgt.n	8000558 <main+0x8c>
  {
 800057a:	e7be      	b.n	80004fa <main+0x2e>
 800057c:	20000050 	.word	0x20000050
 8000580:	40020000 	.word	0x40020000
 8000584:	0007a120 	.word	0x0007a120

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 f9da 	bl	8002950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <SystemClock_Config+0xc8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a26      	ldr	r2, [pc, #152]	; (8000650 <SystemClock_Config+0xc8>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <SystemClock_Config+0xc8>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <SystemClock_Config+0xcc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a20      	ldr	r2, [pc, #128]	; (8000654 <SystemClock_Config+0xcc>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <SystemClock_Config+0xcc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005fc:	2348      	movs	r3, #72	; 0x48
 80005fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000604:	2304      	movs	r3, #4
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fe91 	bl	8001334 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000618:	f000 f92b 	bl	8000872 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2302      	movs	r3, #2
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2102      	movs	r1, #2
 8000638:	4618      	mov	r0, r3
 800063a:	f001 f8f3 	bl	8001824 <HAL_RCC_ClockConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000644:	f000 f915 	bl	8000872 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3750      	adds	r7, #80	; 0x50
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_CAN1_Init+0x60>)
 800065e:	4a17      	ldr	r2, [pc, #92]	; (80006bc <MX_CAN1_Init+0x64>)
 8000660:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_CAN1_Init+0x60>)
 8000664:	2210      	movs	r2, #16
 8000666:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_CAN1_Init+0x60>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_CAN1_Init+0x60>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000674:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_CAN1_Init+0x60>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_CAN1_Init+0x60>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_CAN1_Init+0x60>)
 8000682:	2200      	movs	r2, #0
 8000684:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_CAN1_Init+0x60>)
 8000688:	2200      	movs	r2, #0
 800068a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <MX_CAN1_Init+0x60>)
 800068e:	2200      	movs	r2, #0
 8000690:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_CAN1_Init+0x60>)
 8000694:	2200      	movs	r2, #0
 8000696:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_CAN1_Init+0x60>)
 800069a:	2200      	movs	r2, #0
 800069c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_CAN1_Init+0x60>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_CAN1_Init+0x60>)
 80006a6:	f000 faad 	bl	8000c04 <HAL_CAN_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006b0:	f000 f8df 	bl	8000872 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000028 	.word	0x20000028
 80006bc:	40006400 	.word	0x40006400

080006c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08e      	sub	sp, #56	; 0x38
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
 80006ec:	615a      	str	r2, [r3, #20]
 80006ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006f0:	4b32      	ldr	r3, [pc, #200]	; (80007bc <MX_TIM2_Init+0xfc>)
 80006f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006f8:	4b30      	ldr	r3, [pc, #192]	; (80007bc <MX_TIM2_Init+0xfc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fe:	4b2f      	ldr	r3, [pc, #188]	; (80007bc <MX_TIM2_Init+0xfc>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000704:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <MX_TIM2_Init+0xfc>)
 8000706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800070a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070c:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MX_TIM2_Init+0xfc>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000712:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <MX_TIM2_Init+0xfc>)
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000718:	4828      	ldr	r0, [pc, #160]	; (80007bc <MX_TIM2_Init+0xfc>)
 800071a:	f001 fa6f 	bl	8001bfc <HAL_TIM_Base_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000724:	f000 f8a5 	bl	8000872 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800072e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000732:	4619      	mov	r1, r3
 8000734:	4821      	ldr	r0, [pc, #132]	; (80007bc <MX_TIM2_Init+0xfc>)
 8000736:	f001 fc93 	bl	8002060 <HAL_TIM_ConfigClockSource>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000740:	f000 f897 	bl	8000872 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000744:	481d      	ldr	r0, [pc, #116]	; (80007bc <MX_TIM2_Init+0xfc>)
 8000746:	f001 faa8 	bl	8001c9a <HAL_TIM_PWM_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000750:	f000 f88f 	bl	8000872 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4619      	mov	r1, r3
 8000762:	4816      	ldr	r0, [pc, #88]	; (80007bc <MX_TIM2_Init+0xfc>)
 8000764:	f002 f854 	bl	8002810 <HAL_TIMEx_MasterConfigSynchronization>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800076e:	f000 f880 	bl	8000872 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000772:	2360      	movs	r3, #96	; 0x60
 8000774:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	4619      	mov	r1, r3
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_TIM2_Init+0xfc>)
 800078a:	f001 fba7 	bl	8001edc <HAL_TIM_PWM_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000794:	f000 f86d 	bl	8000872 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2204      	movs	r2, #4
 800079c:	4619      	mov	r1, r3
 800079e:	4807      	ldr	r0, [pc, #28]	; (80007bc <MX_TIM2_Init+0xfc>)
 80007a0:	f001 fb9c 	bl	8001edc <HAL_TIM_PWM_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80007aa:	f000 f862 	bl	8000872 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007ae:	4803      	ldr	r0, [pc, #12]	; (80007bc <MX_TIM2_Init+0xfc>)
 80007b0:	f000 f8f4 	bl	800099c <HAL_TIM_MspPostInit>

}
 80007b4:	bf00      	nop
 80007b6:	3738      	adds	r7, #56	; 0x38
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000050 	.word	0x20000050

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_GPIO_Init+0x7c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <MX_GPIO_Init+0x7c>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_GPIO_Init+0x7c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_GPIO_Init+0x7c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a10      	ldr	r2, [pc, #64]	; (800083c <MX_GPIO_Init+0x7c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_GPIO_Init+0x7c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CH1_EN_Pin|CH2_EN_Pin|RELAY_EN_Pin|LED1_Pin
 800080e:	2200      	movs	r2, #0
 8000810:	21dc      	movs	r1, #220	; 0xdc
 8000812:	480b      	ldr	r0, [pc, #44]	; (8000840 <MX_GPIO_Init+0x80>)
 8000814:	f000 fd74 	bl	8001300 <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CH1_EN_Pin CH2_EN_Pin RELAY_EN_Pin LED1_Pin
                           LED2_Pin */
  GPIO_InitStruct.Pin = CH1_EN_Pin|CH2_EN_Pin|RELAY_EN_Pin|LED1_Pin
 8000818:	23dc      	movs	r3, #220	; 0xdc
 800081a:	60fb      	str	r3, [r7, #12]
                          |LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4619      	mov	r1, r3
 800082e:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_GPIO_Init+0x80>)
 8000830:	f000 fbca 	bl	8000fc8 <HAL_GPIO_Init>

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020000 	.word	0x40020000

08000844 <delay>:

/* USER CODE BEGIN 4 */
void delay (int a)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  volatile int i,j;
  for (i=0 ; i < a ; i++)
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	e005      	b.n	800085e <delay+0x1a>
  {
    j++;
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	3301      	adds	r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
  for (i=0 ; i < a ; i++)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	3301      	adds	r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	429a      	cmp	r2, r3
 8000864:	dcf5      	bgt.n	8000852 <delay+0xe>
  }
  return;
 8000866:	bf00      	nop
}
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000876:	b672      	cpsid	i
}
 8000878:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087a:	e7fe      	b.n	800087a <Error_Handler+0x8>

0800087c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <HAL_MspInit+0x4c>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000890:	6453      	str	r3, [r2, #68]	; 0x44
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a19      	ldr	r2, [pc, #100]	; (8000950 <HAL_CAN_MspInit+0x84>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d12c      	bne.n	8000948 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <HAL_CAN_MspInit+0x88>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <HAL_CAN_MspInit+0x88>)
 80008f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <HAL_CAN_MspInit+0x88>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_CAN_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <HAL_CAN_MspInit+0x88>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_CAN_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000926:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800092a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000938:	2309      	movs	r3, #9
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <HAL_CAN_MspInit+0x8c>)
 8000944:	f000 fb40 	bl	8000fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	; 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40006400 	.word	0x40006400
 8000954:	40023800 	.word	0x40023800
 8000958:	40020000 	.word	0x40020000

0800095c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800096c:	d10d      	bne.n	800098a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_TIM_Base_MspInit+0x3c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_TIM_Base_MspInit+0x3c>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_TIM_Base_MspInit+0x3c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009bc:	d11d      	bne.n	80009fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_TIM_MspPostInit+0x68>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <HAL_TIM_MspPostInit+0x68>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_TIM_MspPostInit+0x68>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009da:	2303      	movs	r3, #3
 80009dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <HAL_TIM_MspPostInit+0x6c>)
 80009f6:	f000 fae7 	bl	8000fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009fa:	bf00      	nop
 80009fc:	3720      	adds	r7, #32
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <NMI_Handler+0x4>

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f890 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000abc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a8a:	490e      	ldr	r1, [pc, #56]	; (8000ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa0:	4c0b      	ldr	r4, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aae:	f7ff ffd7 	bl	8000a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f001 ff29 	bl	8002908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab6:	f7ff fd09 	bl	80004cc <main>
  bx  lr    
 8000aba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000abc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac8:	08002998 	.word	0x08002998
  ldr r2, =_sbss
 8000acc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ad0:	2000009c 	.word	0x2000009c

08000ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <HAL_Init+0x40>)
 8000ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_Init+0x40>)
 8000aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_Init+0x40>)
 8000afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 fa2d 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b06:	200f      	movs	r0, #15
 8000b08:	f000 f808 	bl	8000b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0c:	f7ff feb6 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023c00 	.word	0x40023c00

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_InitTick+0x54>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x58>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 fa37 	bl	8000fae <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00e      	b.n	8000b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d80a      	bhi.n	8000b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b58:	f000 fa0d 	bl	8000f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <HAL_InitTick+0x5c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000098 	.word	0x20000098

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000098 	.word	0x20000098

08000bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc4:	f7ff ffee 	bl	8000ba4 <HAL_GetTick>
 8000bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bd4:	d005      	beq.n	8000be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_Delay+0x44>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000be2:	bf00      	nop
 8000be4:	f7ff ffde 	bl	8000ba4 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d8f7      	bhi.n	8000be4 <HAL_Delay+0x28>
  {
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008

08000c04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e0ed      	b.n	8000df2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d102      	bne.n	8000c28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff fe52 	bl	80008cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f042 0201 	orr.w	r2, r2, #1
 8000c36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c38:	f7ff ffb4 	bl	8000ba4 <HAL_GetTick>
 8000c3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c3e:	e012      	b.n	8000c66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c40:	f7ff ffb0 	bl	8000ba4 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b0a      	cmp	r3, #10
 8000c4c:	d90b      	bls.n	8000c66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2205      	movs	r2, #5
 8000c5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e0c5      	b.n	8000df2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d0e5      	beq.n	8000c40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f022 0202 	bic.w	r2, r2, #2
 8000c82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c84:	f7ff ff8e 	bl	8000ba4 <HAL_GetTick>
 8000c88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c8a:	e012      	b.n	8000cb2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c8c:	f7ff ff8a 	bl	8000ba4 <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	2b0a      	cmp	r3, #10
 8000c98:	d90b      	bls.n	8000cb2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2205      	movs	r2, #5
 8000caa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e09f      	b.n	8000df2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1e5      	bne.n	8000c8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	7e1b      	ldrb	r3, [r3, #24]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d108      	bne.n	8000cda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	e007      	b.n	8000cea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ce8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	7e5b      	ldrb	r3, [r3, #25]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d108      	bne.n	8000d04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	e007      	b.n	8000d14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7e9b      	ldrb	r3, [r3, #26]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d108      	bne.n	8000d2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f042 0220 	orr.w	r2, r2, #32
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e007      	b.n	8000d3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 0220 	bic.w	r2, r2, #32
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	7edb      	ldrb	r3, [r3, #27]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d108      	bne.n	8000d58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 0210 	bic.w	r2, r2, #16
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	e007      	b.n	8000d68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f042 0210 	orr.w	r2, r2, #16
 8000d66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	7f1b      	ldrb	r3, [r3, #28]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d108      	bne.n	8000d82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 0208 	orr.w	r2, r2, #8
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	e007      	b.n	8000d92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0208 	bic.w	r2, r2, #8
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7f5b      	ldrb	r3, [r3, #29]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d108      	bne.n	8000dac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f042 0204 	orr.w	r2, r2, #4
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	e007      	b.n	8000dbc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 0204 	bic.w	r2, r2, #4
 8000dba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	ea42 0103 	orr.w	r1, r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	1e5a      	subs	r2, r3, #1
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	430a      	orrs	r2, r1
 8000de0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2201      	movs	r2, #1
 8000dec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	; (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	; 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f2c:	d301      	bcc.n	8000f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <SysTick_Config+0x40>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f40:	f7ff ff8e 	bl	8000e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <SysTick_Config+0x40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <SysTick_Config+0x40>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff47 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff5c 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff8e 	bl	8000eb4 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5d 	bl	8000e60 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffb0 	bl	8000f1c <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
 8000fe2:	e16b      	b.n	80012bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	f040 815a 	bne.w	80012b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b01      	cmp	r3, #1
 800100c:	d005      	beq.n	800101a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001016:	2b02      	cmp	r3, #2
 8001018:	d130      	bne.n	800107c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	68da      	ldr	r2, [r3, #12]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001050:	2201      	movs	r2, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	091b      	lsrs	r3, r3, #4
 8001066:	f003 0201 	and.w	r2, r3, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b03      	cmp	r3, #3
 8001086:	d017      	beq.n	80010b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d123      	bne.n	800110c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	08da      	lsrs	r2, r3, #3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3208      	adds	r2, #8
 80010cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	220f      	movs	r2, #15
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	691a      	ldr	r2, [r3, #16]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	69b9      	ldr	r1, [r7, #24]
 8001108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0203 	and.w	r2, r3, #3
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 80b4 	beq.w	80012b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b60      	ldr	r3, [pc, #384]	; (80012d4 <HAL_GPIO_Init+0x30c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	4a5f      	ldr	r2, [pc, #380]	; (80012d4 <HAL_GPIO_Init+0x30c>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115c:	6453      	str	r3, [r2, #68]	; 0x44
 800115e:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <HAL_GPIO_Init+0x30c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116a:	4a5b      	ldr	r2, [pc, #364]	; (80012d8 <HAL_GPIO_Init+0x310>)
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	220f      	movs	r2, #15
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a52      	ldr	r2, [pc, #328]	; (80012dc <HAL_GPIO_Init+0x314>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d02b      	beq.n	80011ee <HAL_GPIO_Init+0x226>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a51      	ldr	r2, [pc, #324]	; (80012e0 <HAL_GPIO_Init+0x318>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d025      	beq.n	80011ea <HAL_GPIO_Init+0x222>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_GPIO_Init+0x31c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d01f      	beq.n	80011e6 <HAL_GPIO_Init+0x21e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4f      	ldr	r2, [pc, #316]	; (80012e8 <HAL_GPIO_Init+0x320>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d019      	beq.n	80011e2 <HAL_GPIO_Init+0x21a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4e      	ldr	r2, [pc, #312]	; (80012ec <HAL_GPIO_Init+0x324>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d013      	beq.n	80011de <HAL_GPIO_Init+0x216>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4d      	ldr	r2, [pc, #308]	; (80012f0 <HAL_GPIO_Init+0x328>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d00d      	beq.n	80011da <HAL_GPIO_Init+0x212>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4c      	ldr	r2, [pc, #304]	; (80012f4 <HAL_GPIO_Init+0x32c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d007      	beq.n	80011d6 <HAL_GPIO_Init+0x20e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4b      	ldr	r2, [pc, #300]	; (80012f8 <HAL_GPIO_Init+0x330>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d101      	bne.n	80011d2 <HAL_GPIO_Init+0x20a>
 80011ce:	2307      	movs	r3, #7
 80011d0:	e00e      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011d2:	2308      	movs	r3, #8
 80011d4:	e00c      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011d6:	2306      	movs	r3, #6
 80011d8:	e00a      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011da:	2305      	movs	r3, #5
 80011dc:	e008      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011de:	2304      	movs	r3, #4
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e004      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011ee:	2300      	movs	r3, #0
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	f002 0203 	and.w	r2, r2, #3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4093      	lsls	r3, r2
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001200:	4935      	ldr	r1, [pc, #212]	; (80012d8 <HAL_GPIO_Init+0x310>)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120e:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <HAL_GPIO_Init+0x334>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001232:	4a32      	ldr	r2, [pc, #200]	; (80012fc <HAL_GPIO_Init+0x334>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001238:	4b30      	ldr	r3, [pc, #192]	; (80012fc <HAL_GPIO_Init+0x334>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800125c:	4a27      	ldr	r2, [pc, #156]	; (80012fc <HAL_GPIO_Init+0x334>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001262:	4b26      	ldr	r3, [pc, #152]	; (80012fc <HAL_GPIO_Init+0x334>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001286:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <HAL_GPIO_Init+0x334>)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <HAL_GPIO_Init+0x334>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <HAL_GPIO_Init+0x334>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3301      	adds	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	f67f ae90 	bls.w	8000fe4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40021400 	.word	0x40021400
 80012f4:	40021800 	.word	0x40021800
 80012f8:	40021c00 	.word	0x40021c00
 80012fc:	40013c00 	.word	0x40013c00

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800131c:	e003      	b.n	8001326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	041a      	lsls	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e267      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d075      	beq.n	800143e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001352:	4b88      	ldr	r3, [pc, #544]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b04      	cmp	r3, #4
 800135c:	d00c      	beq.n	8001378 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800135e:	4b85      	ldr	r3, [pc, #532]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001366:	2b08      	cmp	r3, #8
 8001368:	d112      	bne.n	8001390 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136a:	4b82      	ldr	r3, [pc, #520]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001376:	d10b      	bne.n	8001390 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001378:	4b7e      	ldr	r3, [pc, #504]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d05b      	beq.n	800143c <HAL_RCC_OscConfig+0x108>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d157      	bne.n	800143c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e242      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001398:	d106      	bne.n	80013a8 <HAL_RCC_OscConfig+0x74>
 800139a:	4b76      	ldr	r3, [pc, #472]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a75      	ldr	r2, [pc, #468]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e01d      	b.n	80013e4 <HAL_RCC_OscConfig+0xb0>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x98>
 80013b2:	4b70      	ldr	r3, [pc, #448]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a6f      	ldr	r2, [pc, #444]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b6d      	ldr	r3, [pc, #436]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a6c      	ldr	r2, [pc, #432]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e00b      	b.n	80013e4 <HAL_RCC_OscConfig+0xb0>
 80013cc:	4b69      	ldr	r3, [pc, #420]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a68      	ldr	r2, [pc, #416]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b66      	ldr	r3, [pc, #408]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a65      	ldr	r2, [pc, #404]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d013      	beq.n	8001414 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fbda 	bl	8000ba4 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fbd6 	bl	8000ba4 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	; 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e207      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	4b5b      	ldr	r3, [pc, #364]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0xc0>
 8001412:	e014      	b.n	800143e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fbc6 	bl	8000ba4 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fbc2 	bl	8000ba4 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1f3      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	4b51      	ldr	r3, [pc, #324]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0xe8>
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d063      	beq.n	8001512 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800144a:	4b4a      	ldr	r3, [pc, #296]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00b      	beq.n	800146e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001456:	4b47      	ldr	r3, [pc, #284]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800145e:	2b08      	cmp	r3, #8
 8001460:	d11c      	bne.n	800149c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001462:	4b44      	ldr	r3, [pc, #272]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d116      	bne.n	800149c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146e:	4b41      	ldr	r3, [pc, #260]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <HAL_RCC_OscConfig+0x152>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d001      	beq.n	8001486 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e1c7      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001486:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4937      	ldr	r1, [pc, #220]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149a:	e03a      	b.n	8001512 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d020      	beq.n	80014e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a4:	4b34      	ldr	r3, [pc, #208]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014aa:	f7ff fb7b 	bl	8000ba4 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b2:	f7ff fb77 	bl	8000ba4 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e1a8      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4925      	ldr	r1, [pc, #148]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	600b      	str	r3, [r1, #0]
 80014e4:	e015      	b.n	8001512 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fb5a 	bl	8000ba4 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f4:	f7ff fb56 	bl	8000ba4 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e187      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d036      	beq.n	800158c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d016      	beq.n	8001554 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_RCC_OscConfig+0x248>)
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fb3a 	bl	8000ba4 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001534:	f7ff fb36 	bl	8000ba4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e167      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x200>
 8001552:	e01b      	b.n	800158c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_RCC_OscConfig+0x248>)
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff fb23 	bl	8000ba4 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001560:	e00e      	b.n	8001580 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001562:	f7ff fb1f 	bl	8000ba4 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d907      	bls.n	8001580 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e150      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
 8001574:	40023800 	.word	0x40023800
 8001578:	42470000 	.word	0x42470000
 800157c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001580:	4b88      	ldr	r3, [pc, #544]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1ea      	bne.n	8001562 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 8097 	beq.w	80016c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159e:	4b81      	ldr	r3, [pc, #516]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10f      	bne.n	80015ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	4b7d      	ldr	r3, [pc, #500]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a7c      	ldr	r2, [pc, #496]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b7a      	ldr	r3, [pc, #488]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c6:	2301      	movs	r3, #1
 80015c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ca:	4b77      	ldr	r3, [pc, #476]	; (80017a8 <HAL_RCC_OscConfig+0x474>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d118      	bne.n	8001608 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d6:	4b74      	ldr	r3, [pc, #464]	; (80017a8 <HAL_RCC_OscConfig+0x474>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a73      	ldr	r2, [pc, #460]	; (80017a8 <HAL_RCC_OscConfig+0x474>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fadf 	bl	8000ba4 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ea:	f7ff fadb 	bl	8000ba4 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e10c      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fc:	4b6a      	ldr	r3, [pc, #424]	; (80017a8 <HAL_RCC_OscConfig+0x474>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x2ea>
 8001610:	4b64      	ldr	r3, [pc, #400]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	4a63      	ldr	r2, [pc, #396]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6713      	str	r3, [r2, #112]	; 0x70
 800161c:	e01c      	b.n	8001658 <HAL_RCC_OscConfig+0x324>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b05      	cmp	r3, #5
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x30c>
 8001626:	4b5f      	ldr	r3, [pc, #380]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162a:	4a5e      	ldr	r2, [pc, #376]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6713      	str	r3, [r2, #112]	; 0x70
 8001632:	4b5c      	ldr	r3, [pc, #368]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	4a5b      	ldr	r2, [pc, #364]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6713      	str	r3, [r2, #112]	; 0x70
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0x324>
 8001640:	4b58      	ldr	r3, [pc, #352]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	4a57      	ldr	r2, [pc, #348]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001646:	f023 0301 	bic.w	r3, r3, #1
 800164a:	6713      	str	r3, [r2, #112]	; 0x70
 800164c:	4b55      	ldr	r3, [pc, #340]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 800164e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001650:	4a54      	ldr	r2, [pc, #336]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001652:	f023 0304 	bic.w	r3, r3, #4
 8001656:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d015      	beq.n	800168c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001660:	f7ff faa0 	bl	8000ba4 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001666:	e00a      	b.n	800167e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001668:	f7ff fa9c 	bl	8000ba4 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	; 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e0cb      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167e:	4b49      	ldr	r3, [pc, #292]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0ee      	beq.n	8001668 <HAL_RCC_OscConfig+0x334>
 800168a:	e014      	b.n	80016b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168c:	f7ff fa8a 	bl	8000ba4 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001692:	e00a      	b.n	80016aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001694:	f7ff fa86 	bl	8000ba4 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e0b5      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016aa:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1ee      	bne.n	8001694 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d105      	bne.n	80016c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016bc:	4b39      	ldr	r3, [pc, #228]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	4a38      	ldr	r2, [pc, #224]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 80016c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80a1 	beq.w	8001814 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016d2:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d05c      	beq.n	8001798 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d141      	bne.n	800176a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e6:	4b31      	ldr	r3, [pc, #196]	; (80017ac <HAL_RCC_OscConfig+0x478>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fa5a 	bl	8000ba4 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff fa56 	bl	8000ba4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e087      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001706:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69da      	ldr	r2, [r3, #28]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	019b      	lsls	r3, r3, #6
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	085b      	lsrs	r3, r3, #1
 800172a:	3b01      	subs	r3, #1
 800172c:	041b      	lsls	r3, r3, #16
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	061b      	lsls	r3, r3, #24
 8001736:	491b      	ldr	r1, [pc, #108]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_RCC_OscConfig+0x478>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fa2f 	bl	8000ba4 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff fa2b 	bl	8000ba4 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e05c      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x416>
 8001768:	e054      	b.n	8001814 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_RCC_OscConfig+0x478>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fa18 	bl	8000ba4 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff fa14 	bl	8000ba4 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e045      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x444>
 8001796:	e03d      	b.n	8001814 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e038      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40007000 	.word	0x40007000
 80017ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_RCC_OscConfig+0x4ec>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d028      	beq.n	8001810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d121      	bne.n	8001810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d11a      	bne.n	8001810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017e0:	4013      	ands	r3, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d111      	bne.n	8001810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f6:	085b      	lsrs	r3, r3, #1
 80017f8:	3b01      	subs	r3, #1
 80017fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d107      	bne.n	8001810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800

08001824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0cc      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001838:	4b68      	ldr	r3, [pc, #416]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d90c      	bls.n	8001860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b65      	ldr	r3, [pc, #404]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b63      	ldr	r3, [pc, #396]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0b8      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001878:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4a58      	ldr	r2, [pc, #352]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001890:	4b53      	ldr	r3, [pc, #332]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800189a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800189c:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	494d      	ldr	r1, [pc, #308]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d044      	beq.n	8001944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d107      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	4b47      	ldr	r3, [pc, #284]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d119      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e07f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d003      	beq.n	80018e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e2:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e06f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f2:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e067      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001902:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f023 0203 	bic.w	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4934      	ldr	r1, [pc, #208]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	4313      	orrs	r3, r2
 8001912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001914:	f7ff f946 	bl	8000ba4 <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	e00a      	b.n	8001932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191c:	f7ff f942 	bl	8000ba4 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	; 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e04f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 020c 	and.w	r2, r3, #12
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	429a      	cmp	r2, r3
 8001942:	d1eb      	bne.n	800191c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d20c      	bcs.n	800196c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b22      	ldr	r3, [pc, #136]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e032      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4916      	ldr	r1, [pc, #88]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	4313      	orrs	r3, r2
 8001988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	490e      	ldr	r1, [pc, #56]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019aa:	f000 f821 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 80019ae:	4602      	mov	r2, r0
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	490a      	ldr	r1, [pc, #40]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 80019bc:	5ccb      	ldrb	r3, [r1, r3]
 80019be:	fa22 f303 	lsr.w	r3, r2, r3
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_RCC_ClockConfig+0x1c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f8a6 	bl	8000b1c <HAL_InitTick>

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023c00 	.word	0x40023c00
 80019e0:	40023800 	.word	0x40023800
 80019e4:	08002978 	.word	0x08002978
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000004 	.word	0x20000004

080019f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019f4:	b094      	sub	sp, #80	; 0x50
 80019f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	647b      	str	r3, [r7, #68]	; 0x44
 80019fc:	2300      	movs	r3, #0
 80019fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a00:	2300      	movs	r3, #0
 8001a02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a08:	4b79      	ldr	r3, [pc, #484]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d00d      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0x40>
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	f200 80e1 	bhi.w	8001bdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0x34>
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d003      	beq.n	8001a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a22:	e0db      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a24:	4b73      	ldr	r3, [pc, #460]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a26:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a28:	e0db      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a2a:	4b73      	ldr	r3, [pc, #460]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a2e:	e0d8      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a30:	4b6f      	ldr	r3, [pc, #444]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a38:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a3a:	4b6d      	ldr	r3, [pc, #436]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d063      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a46:	4b6a      	ldr	r3, [pc, #424]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	099b      	lsrs	r3, r3, #6
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a62:	4622      	mov	r2, r4
 8001a64:	462b      	mov	r3, r5
 8001a66:	f04f 0000 	mov.w	r0, #0
 8001a6a:	f04f 0100 	mov.w	r1, #0
 8001a6e:	0159      	lsls	r1, r3, #5
 8001a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a74:	0150      	lsls	r0, r2, #5
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	1a51      	subs	r1, r2, r1
 8001a7e:	6139      	str	r1, [r7, #16]
 8001a80:	4629      	mov	r1, r5
 8001a82:	eb63 0301 	sbc.w	r3, r3, r1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a94:	4659      	mov	r1, fp
 8001a96:	018b      	lsls	r3, r1, #6
 8001a98:	4651      	mov	r1, sl
 8001a9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a9e:	4651      	mov	r1, sl
 8001aa0:	018a      	lsls	r2, r1, #6
 8001aa2:	4651      	mov	r1, sl
 8001aa4:	ebb2 0801 	subs.w	r8, r2, r1
 8001aa8:	4659      	mov	r1, fp
 8001aaa:	eb63 0901 	sbc.w	r9, r3, r1
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac2:	4690      	mov	r8, r2
 8001ac4:	4699      	mov	r9, r3
 8001ac6:	4623      	mov	r3, r4
 8001ac8:	eb18 0303 	adds.w	r3, r8, r3
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	462b      	mov	r3, r5
 8001ad0:	eb49 0303 	adc.w	r3, r9, r3
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	024b      	lsls	r3, r1, #9
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aec:	4621      	mov	r1, r4
 8001aee:	024a      	lsls	r2, r1, #9
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af6:	2200      	movs	r2, #0
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001afa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001afc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b00:	f7fe fb62 	bl	80001c8 <__aeabi_uldivmod>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4613      	mov	r3, r2
 8001b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b0c:	e058      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0e:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	2200      	movs	r2, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	4611      	mov	r1, r2
 8001b1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b1e:	623b      	str	r3, [r7, #32]
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
 8001b24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b28:	4642      	mov	r2, r8
 8001b2a:	464b      	mov	r3, r9
 8001b2c:	f04f 0000 	mov.w	r0, #0
 8001b30:	f04f 0100 	mov.w	r1, #0
 8001b34:	0159      	lsls	r1, r3, #5
 8001b36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b3a:	0150      	lsls	r0, r2, #5
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4641      	mov	r1, r8
 8001b42:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b46:	4649      	mov	r1, r9
 8001b48:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b60:	ebb2 040a 	subs.w	r4, r2, sl
 8001b64:	eb63 050b 	sbc.w	r5, r3, fp
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	00eb      	lsls	r3, r5, #3
 8001b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b76:	00e2      	lsls	r2, r4, #3
 8001b78:	4614      	mov	r4, r2
 8001b7a:	461d      	mov	r5, r3
 8001b7c:	4643      	mov	r3, r8
 8001b7e:	18e3      	adds	r3, r4, r3
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	464b      	mov	r3, r9
 8001b84:	eb45 0303 	adc.w	r3, r5, r3
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b96:	4629      	mov	r1, r5
 8001b98:	028b      	lsls	r3, r1, #10
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	028a      	lsls	r2, r1, #10
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001baa:	2200      	movs	r2, #0
 8001bac:	61bb      	str	r3, [r7, #24]
 8001bae:	61fa      	str	r2, [r7, #28]
 8001bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb4:	f7fe fb08 	bl	80001c8 <__aeabi_uldivmod>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bda:	e002      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3750      	adds	r7, #80	; 0x50
 8001be8:	46bd      	mov	sp, r7
 8001bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	00f42400 	.word	0x00f42400
 8001bf8:	007a1200 	.word	0x007a1200

08001bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e041      	b.n	8001c92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7fe fe9a 	bl	800095c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3304      	adds	r3, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f000 fad8 	bl	80021f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e041      	b.n	8001d30 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d106      	bne.n	8001cc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f839 	bl	8001d38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4610      	mov	r0, r2
 8001cda:	f000 fa89 	bl	80021f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d109      	bne.n	8001d70 <HAL_TIM_PWM_Start+0x24>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	bf14      	ite	ne
 8001d68:	2301      	movne	r3, #1
 8001d6a:	2300      	moveq	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	e022      	b.n	8001db6 <HAL_TIM_PWM_Start+0x6a>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d109      	bne.n	8001d8a <HAL_TIM_PWM_Start+0x3e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	bf14      	ite	ne
 8001d82:	2301      	movne	r3, #1
 8001d84:	2300      	moveq	r3, #0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	e015      	b.n	8001db6 <HAL_TIM_PWM_Start+0x6a>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d109      	bne.n	8001da4 <HAL_TIM_PWM_Start+0x58>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	bf14      	ite	ne
 8001d9c:	2301      	movne	r3, #1
 8001d9e:	2300      	moveq	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	e008      	b.n	8001db6 <HAL_TIM_PWM_Start+0x6a>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	bf14      	ite	ne
 8001db0:	2301      	movne	r3, #1
 8001db2:	2300      	moveq	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e07c      	b.n	8001eb8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d104      	bne.n	8001dce <HAL_TIM_PWM_Start+0x82>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dcc:	e013      	b.n	8001df6 <HAL_TIM_PWM_Start+0xaa>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d104      	bne.n	8001dde <HAL_TIM_PWM_Start+0x92>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ddc:	e00b      	b.n	8001df6 <HAL_TIM_PWM_Start+0xaa>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d104      	bne.n	8001dee <HAL_TIM_PWM_Start+0xa2>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dec:	e003      	b.n	8001df6 <HAL_TIM_PWM_Start+0xaa>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2202      	movs	r2, #2
 8001df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	6839      	ldr	r1, [r7, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 fce0 	bl	80027c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a2d      	ldr	r2, [pc, #180]	; (8001ec0 <HAL_TIM_PWM_Start+0x174>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d004      	beq.n	8001e18 <HAL_TIM_PWM_Start+0xcc>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a2c      	ldr	r2, [pc, #176]	; (8001ec4 <HAL_TIM_PWM_Start+0x178>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d101      	bne.n	8001e1c <HAL_TIM_PWM_Start+0xd0>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e000      	b.n	8001e1e <HAL_TIM_PWM_Start+0xd2>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a22      	ldr	r2, [pc, #136]	; (8001ec0 <HAL_TIM_PWM_Start+0x174>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d022      	beq.n	8001e82 <HAL_TIM_PWM_Start+0x136>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e44:	d01d      	beq.n	8001e82 <HAL_TIM_PWM_Start+0x136>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <HAL_TIM_PWM_Start+0x17c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d018      	beq.n	8001e82 <HAL_TIM_PWM_Start+0x136>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <HAL_TIM_PWM_Start+0x180>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_TIM_PWM_Start+0x136>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <HAL_TIM_PWM_Start+0x184>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d00e      	beq.n	8001e82 <HAL_TIM_PWM_Start+0x136>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a16      	ldr	r2, [pc, #88]	; (8001ec4 <HAL_TIM_PWM_Start+0x178>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d009      	beq.n	8001e82 <HAL_TIM_PWM_Start+0x136>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a18      	ldr	r2, [pc, #96]	; (8001ed4 <HAL_TIM_PWM_Start+0x188>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d004      	beq.n	8001e82 <HAL_TIM_PWM_Start+0x136>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a16      	ldr	r2, [pc, #88]	; (8001ed8 <HAL_TIM_PWM_Start+0x18c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d111      	bne.n	8001ea6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b06      	cmp	r3, #6
 8001e92:	d010      	beq.n	8001eb6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea4:	e007      	b.n	8001eb6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	40010400 	.word	0x40010400
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40000800 	.word	0x40000800
 8001ed0:	40000c00 	.word	0x40000c00
 8001ed4:	40014000 	.word	0x40014000
 8001ed8:	40001800 	.word	0x40001800

08001edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e0ae      	b.n	8002058 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b0c      	cmp	r3, #12
 8001f06:	f200 809f 	bhi.w	8002048 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001f0a:	a201      	add	r2, pc, #4	; (adr r2, 8001f10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f10:	08001f45 	.word	0x08001f45
 8001f14:	08002049 	.word	0x08002049
 8001f18:	08002049 	.word	0x08002049
 8001f1c:	08002049 	.word	0x08002049
 8001f20:	08001f85 	.word	0x08001f85
 8001f24:	08002049 	.word	0x08002049
 8001f28:	08002049 	.word	0x08002049
 8001f2c:	08002049 	.word	0x08002049
 8001f30:	08001fc7 	.word	0x08001fc7
 8001f34:	08002049 	.word	0x08002049
 8001f38:	08002049 	.word	0x08002049
 8001f3c:	08002049 	.word	0x08002049
 8001f40:	08002007 	.word	0x08002007
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f9f0 	bl	8002330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0208 	orr.w	r2, r2, #8
 8001f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699a      	ldr	r2, [r3, #24]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0204 	bic.w	r2, r2, #4
 8001f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6999      	ldr	r1, [r3, #24]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	619a      	str	r2, [r3, #24]
      break;
 8001f82:	e064      	b.n	800204e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 fa40 	bl	8002410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699a      	ldr	r2, [r3, #24]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6999      	ldr	r1, [r3, #24]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	021a      	lsls	r2, r3, #8
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	619a      	str	r2, [r3, #24]
      break;
 8001fc4:	e043      	b.n	800204e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fa95 	bl	80024fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	69da      	ldr	r2, [r3, #28]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0208 	orr.w	r2, r2, #8
 8001fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	69da      	ldr	r2, [r3, #28]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0204 	bic.w	r2, r2, #4
 8001ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	69d9      	ldr	r1, [r3, #28]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	61da      	str	r2, [r3, #28]
      break;
 8002004:	e023      	b.n	800204e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fae9 	bl	80025e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	69da      	ldr	r2, [r3, #28]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	69da      	ldr	r2, [r3, #28]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69d9      	ldr	r1, [r3, #28]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	021a      	lsls	r2, r3, #8
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	61da      	str	r2, [r3, #28]
      break;
 8002046:	e002      	b.n	800204e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	75fb      	strb	r3, [r7, #23]
      break;
 800204c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002056:	7dfb      	ldrb	r3, [r7, #23]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_TIM_ConfigClockSource+0x1c>
 8002078:	2302      	movs	r3, #2
 800207a:	e0b4      	b.n	80021e6 <HAL_TIM_ConfigClockSource+0x186>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800209a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020b4:	d03e      	beq.n	8002134 <HAL_TIM_ConfigClockSource+0xd4>
 80020b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ba:	f200 8087 	bhi.w	80021cc <HAL_TIM_ConfigClockSource+0x16c>
 80020be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c2:	f000 8086 	beq.w	80021d2 <HAL_TIM_ConfigClockSource+0x172>
 80020c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ca:	d87f      	bhi.n	80021cc <HAL_TIM_ConfigClockSource+0x16c>
 80020cc:	2b70      	cmp	r3, #112	; 0x70
 80020ce:	d01a      	beq.n	8002106 <HAL_TIM_ConfigClockSource+0xa6>
 80020d0:	2b70      	cmp	r3, #112	; 0x70
 80020d2:	d87b      	bhi.n	80021cc <HAL_TIM_ConfigClockSource+0x16c>
 80020d4:	2b60      	cmp	r3, #96	; 0x60
 80020d6:	d050      	beq.n	800217a <HAL_TIM_ConfigClockSource+0x11a>
 80020d8:	2b60      	cmp	r3, #96	; 0x60
 80020da:	d877      	bhi.n	80021cc <HAL_TIM_ConfigClockSource+0x16c>
 80020dc:	2b50      	cmp	r3, #80	; 0x50
 80020de:	d03c      	beq.n	800215a <HAL_TIM_ConfigClockSource+0xfa>
 80020e0:	2b50      	cmp	r3, #80	; 0x50
 80020e2:	d873      	bhi.n	80021cc <HAL_TIM_ConfigClockSource+0x16c>
 80020e4:	2b40      	cmp	r3, #64	; 0x40
 80020e6:	d058      	beq.n	800219a <HAL_TIM_ConfigClockSource+0x13a>
 80020e8:	2b40      	cmp	r3, #64	; 0x40
 80020ea:	d86f      	bhi.n	80021cc <HAL_TIM_ConfigClockSource+0x16c>
 80020ec:	2b30      	cmp	r3, #48	; 0x30
 80020ee:	d064      	beq.n	80021ba <HAL_TIM_ConfigClockSource+0x15a>
 80020f0:	2b30      	cmp	r3, #48	; 0x30
 80020f2:	d86b      	bhi.n	80021cc <HAL_TIM_ConfigClockSource+0x16c>
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d060      	beq.n	80021ba <HAL_TIM_ConfigClockSource+0x15a>
 80020f8:	2b20      	cmp	r3, #32
 80020fa:	d867      	bhi.n	80021cc <HAL_TIM_ConfigClockSource+0x16c>
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d05c      	beq.n	80021ba <HAL_TIM_ConfigClockSource+0x15a>
 8002100:	2b10      	cmp	r3, #16
 8002102:	d05a      	beq.n	80021ba <HAL_TIM_ConfigClockSource+0x15a>
 8002104:	e062      	b.n	80021cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6899      	ldr	r1, [r3, #8]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f000 fb35 	bl	8002784 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002128:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	609a      	str	r2, [r3, #8]
      break;
 8002132:	e04f      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	6899      	ldr	r1, [r3, #8]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f000 fb1e 	bl	8002784 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002156:	609a      	str	r2, [r3, #8]
      break;
 8002158:	e03c      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6859      	ldr	r1, [r3, #4]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	461a      	mov	r2, r3
 8002168:	f000 fa92 	bl	8002690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2150      	movs	r1, #80	; 0x50
 8002172:	4618      	mov	r0, r3
 8002174:	f000 faeb 	bl	800274e <TIM_ITRx_SetConfig>
      break;
 8002178:	e02c      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6859      	ldr	r1, [r3, #4]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	461a      	mov	r2, r3
 8002188:	f000 fab1 	bl	80026ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2160      	movs	r1, #96	; 0x60
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fadb 	bl	800274e <TIM_ITRx_SetConfig>
      break;
 8002198:	e01c      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	6859      	ldr	r1, [r3, #4]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	461a      	mov	r2, r3
 80021a8:	f000 fa72 	bl	8002690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2140      	movs	r1, #64	; 0x40
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 facb 	bl	800274e <TIM_ITRx_SetConfig>
      break;
 80021b8:	e00c      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4619      	mov	r1, r3
 80021c4:	4610      	mov	r0, r2
 80021c6:	f000 fac2 	bl	800274e <TIM_ITRx_SetConfig>
      break;
 80021ca:	e003      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
      break;
 80021d0:	e000      	b.n	80021d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a40      	ldr	r2, [pc, #256]	; (8002304 <TIM_Base_SetConfig+0x114>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d013      	beq.n	8002230 <TIM_Base_SetConfig+0x40>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220e:	d00f      	beq.n	8002230 <TIM_Base_SetConfig+0x40>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a3d      	ldr	r2, [pc, #244]	; (8002308 <TIM_Base_SetConfig+0x118>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d00b      	beq.n	8002230 <TIM_Base_SetConfig+0x40>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3c      	ldr	r2, [pc, #240]	; (800230c <TIM_Base_SetConfig+0x11c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d007      	beq.n	8002230 <TIM_Base_SetConfig+0x40>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a3b      	ldr	r2, [pc, #236]	; (8002310 <TIM_Base_SetConfig+0x120>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d003      	beq.n	8002230 <TIM_Base_SetConfig+0x40>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3a      	ldr	r2, [pc, #232]	; (8002314 <TIM_Base_SetConfig+0x124>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d108      	bne.n	8002242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a2f      	ldr	r2, [pc, #188]	; (8002304 <TIM_Base_SetConfig+0x114>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d02b      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002250:	d027      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a2c      	ldr	r2, [pc, #176]	; (8002308 <TIM_Base_SetConfig+0x118>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d023      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a2b      	ldr	r2, [pc, #172]	; (800230c <TIM_Base_SetConfig+0x11c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01f      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a2a      	ldr	r2, [pc, #168]	; (8002310 <TIM_Base_SetConfig+0x120>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01b      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a29      	ldr	r2, [pc, #164]	; (8002314 <TIM_Base_SetConfig+0x124>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d017      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a28      	ldr	r2, [pc, #160]	; (8002318 <TIM_Base_SetConfig+0x128>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a27      	ldr	r2, [pc, #156]	; (800231c <TIM_Base_SetConfig+0x12c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00f      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a26      	ldr	r2, [pc, #152]	; (8002320 <TIM_Base_SetConfig+0x130>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00b      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a25      	ldr	r2, [pc, #148]	; (8002324 <TIM_Base_SetConfig+0x134>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d007      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a24      	ldr	r2, [pc, #144]	; (8002328 <TIM_Base_SetConfig+0x138>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d003      	beq.n	80022a2 <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a23      	ldr	r2, [pc, #140]	; (800232c <TIM_Base_SetConfig+0x13c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d108      	bne.n	80022b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <TIM_Base_SetConfig+0x114>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d003      	beq.n	80022e8 <TIM_Base_SetConfig+0xf8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a0c      	ldr	r2, [pc, #48]	; (8002314 <TIM_Base_SetConfig+0x124>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d103      	bne.n	80022f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	615a      	str	r2, [r3, #20]
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40010000 	.word	0x40010000
 8002308:	40000400 	.word	0x40000400
 800230c:	40000800 	.word	0x40000800
 8002310:	40000c00 	.word	0x40000c00
 8002314:	40010400 	.word	0x40010400
 8002318:	40014000 	.word	0x40014000
 800231c:	40014400 	.word	0x40014400
 8002320:	40014800 	.word	0x40014800
 8002324:	40001800 	.word	0x40001800
 8002328:	40001c00 	.word	0x40001c00
 800232c:	40002000 	.word	0x40002000

08002330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	f023 0201 	bic.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f023 0302 	bic.w	r3, r3, #2
 8002378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a20      	ldr	r2, [pc, #128]	; (8002408 <TIM_OC1_SetConfig+0xd8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d003      	beq.n	8002394 <TIM_OC1_SetConfig+0x64>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a1f      	ldr	r2, [pc, #124]	; (800240c <TIM_OC1_SetConfig+0xdc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d10c      	bne.n	80023ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f023 0308 	bic.w	r3, r3, #8
 800239a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f023 0304 	bic.w	r3, r3, #4
 80023ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a15      	ldr	r2, [pc, #84]	; (8002408 <TIM_OC1_SetConfig+0xd8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d003      	beq.n	80023be <TIM_OC1_SetConfig+0x8e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a14      	ldr	r2, [pc, #80]	; (800240c <TIM_OC1_SetConfig+0xdc>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d111      	bne.n	80023e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	621a      	str	r2, [r3, #32]
}
 80023fc:	bf00      	nop
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	40010000 	.word	0x40010000
 800240c:	40010400 	.word	0x40010400

08002410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	f023 0210 	bic.w	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800243e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f023 0320 	bic.w	r3, r3, #32
 800245a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4313      	orrs	r3, r2
 8002466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a22      	ldr	r2, [pc, #136]	; (80024f4 <TIM_OC2_SetConfig+0xe4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d003      	beq.n	8002478 <TIM_OC2_SetConfig+0x68>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <TIM_OC2_SetConfig+0xe8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d10d      	bne.n	8002494 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800247e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002492:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <TIM_OC2_SetConfig+0xe4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d003      	beq.n	80024a4 <TIM_OC2_SetConfig+0x94>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <TIM_OC2_SetConfig+0xe8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d113      	bne.n	80024cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	621a      	str	r2, [r3, #32]
}
 80024e6:	bf00      	nop
 80024e8:	371c      	adds	r7, #28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40010000 	.word	0x40010000
 80024f8:	40010400 	.word	0x40010400

080024fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0303 	bic.w	r3, r3, #3
 8002532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	4313      	orrs	r3, r2
 8002550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a21      	ldr	r2, [pc, #132]	; (80025dc <TIM_OC3_SetConfig+0xe0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d003      	beq.n	8002562 <TIM_OC3_SetConfig+0x66>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a20      	ldr	r2, [pc, #128]	; (80025e0 <TIM_OC3_SetConfig+0xe4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d10d      	bne.n	800257e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002568:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800257c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a16      	ldr	r2, [pc, #88]	; (80025dc <TIM_OC3_SetConfig+0xe0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d003      	beq.n	800258e <TIM_OC3_SetConfig+0x92>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a15      	ldr	r2, [pc, #84]	; (80025e0 <TIM_OC3_SetConfig+0xe4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d113      	bne.n	80025b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800259c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	621a      	str	r2, [r3, #32]
}
 80025d0:	bf00      	nop
 80025d2:	371c      	adds	r7, #28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	40010000 	.word	0x40010000
 80025e0:	40010400 	.word	0x40010400

080025e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800261a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800262e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	031b      	lsls	r3, r3, #12
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <TIM_OC4_SetConfig+0xa4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d003      	beq.n	800264c <TIM_OC4_SetConfig+0x68>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a11      	ldr	r2, [pc, #68]	; (800268c <TIM_OC4_SetConfig+0xa8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d109      	bne.n	8002660 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	019b      	lsls	r3, r3, #6
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	621a      	str	r2, [r3, #32]
}
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40010000 	.word	0x40010000
 800268c:	40010400 	.word	0x40010400

08002690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	f023 0201 	bic.w	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f023 030a 	bic.w	r3, r3, #10
 80026cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	621a      	str	r2, [r3, #32]
}
 80026e2:	bf00      	nop
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b087      	sub	sp, #28
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	f023 0210 	bic.w	r2, r3, #16
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002718:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	031b      	lsls	r3, r3, #12
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800272a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	621a      	str	r2, [r3, #32]
}
 8002742:	bf00      	nop
 8002744:	371c      	adds	r7, #28
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	f043 0307 	orr.w	r3, r3, #7
 8002770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	609a      	str	r2, [r3, #8]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800279e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	021a      	lsls	r2, r3, #8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	609a      	str	r2, [r3, #8]
}
 80027b8:	bf00      	nop
 80027ba:	371c      	adds	r7, #28
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2201      	movs	r2, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a1a      	ldr	r2, [r3, #32]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	401a      	ands	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a1a      	ldr	r2, [r3, #32]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	621a      	str	r2, [r3, #32]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002824:	2302      	movs	r3, #2
 8002826:	e05a      	b.n	80028de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a21      	ldr	r2, [pc, #132]	; (80028ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d022      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002874:	d01d      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d018      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a1a      	ldr	r2, [pc, #104]	; (80028f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00e      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d009      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a17      	ldr	r2, [pc, #92]	; (8002900 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d004      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a15      	ldr	r2, [pc, #84]	; (8002904 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10c      	bne.n	80028cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40010000 	.word	0x40010000
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40000800 	.word	0x40000800
 80028f8:	40000c00 	.word	0x40000c00
 80028fc:	40010400 	.word	0x40010400
 8002900:	40014000 	.word	0x40014000
 8002904:	40001800 	.word	0x40001800

08002908 <__libc_init_array>:
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	4d0d      	ldr	r5, [pc, #52]	; (8002940 <__libc_init_array+0x38>)
 800290c:	4c0d      	ldr	r4, [pc, #52]	; (8002944 <__libc_init_array+0x3c>)
 800290e:	1b64      	subs	r4, r4, r5
 8002910:	10a4      	asrs	r4, r4, #2
 8002912:	2600      	movs	r6, #0
 8002914:	42a6      	cmp	r6, r4
 8002916:	d109      	bne.n	800292c <__libc_init_array+0x24>
 8002918:	4d0b      	ldr	r5, [pc, #44]	; (8002948 <__libc_init_array+0x40>)
 800291a:	4c0c      	ldr	r4, [pc, #48]	; (800294c <__libc_init_array+0x44>)
 800291c:	f000 f820 	bl	8002960 <_init>
 8002920:	1b64      	subs	r4, r4, r5
 8002922:	10a4      	asrs	r4, r4, #2
 8002924:	2600      	movs	r6, #0
 8002926:	42a6      	cmp	r6, r4
 8002928:	d105      	bne.n	8002936 <__libc_init_array+0x2e>
 800292a:	bd70      	pop	{r4, r5, r6, pc}
 800292c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002930:	4798      	blx	r3
 8002932:	3601      	adds	r6, #1
 8002934:	e7ee      	b.n	8002914 <__libc_init_array+0xc>
 8002936:	f855 3b04 	ldr.w	r3, [r5], #4
 800293a:	4798      	blx	r3
 800293c:	3601      	adds	r6, #1
 800293e:	e7f2      	b.n	8002926 <__libc_init_array+0x1e>
 8002940:	08002990 	.word	0x08002990
 8002944:	08002990 	.word	0x08002990
 8002948:	08002990 	.word	0x08002990
 800294c:	08002994 	.word	0x08002994

08002950 <memset>:
 8002950:	4402      	add	r2, r0
 8002952:	4603      	mov	r3, r0
 8002954:	4293      	cmp	r3, r2
 8002956:	d100      	bne.n	800295a <memset+0xa>
 8002958:	4770      	bx	lr
 800295a:	f803 1b01 	strb.w	r1, [r3], #1
 800295e:	e7f9      	b.n	8002954 <memset+0x4>

08002960 <_init>:
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002962:	bf00      	nop
 8002964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002966:	bc08      	pop	{r3}
 8002968:	469e      	mov	lr, r3
 800296a:	4770      	bx	lr

0800296c <_fini>:
 800296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296e:	bf00      	nop
 8002970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002972:	bc08      	pop	{r3}
 8002974:	469e      	mov	lr, r3
 8002976:	4770      	bx	lr
